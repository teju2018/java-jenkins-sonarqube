pipeline {
    agent any
    environment {
        IMAGE_NAME = "java-sonarqube"
        
    }
    stages {
        stage("Docker Hub Connection") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

       

        stage('Build & SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') { // Use the name configured in Jenkins settings
                    sh '''
                           mvn clean verify sonar:sonar \
                              -Dsonar.projectKey=java1 \
                              -Dsonar.projectName='java1' \
                              -Dsonar.host.url=http://192.168.2.101:9000 \
                              -Dsonar.token=squ_7d6bf5a9809c248d0000f8ba8e9f79493f847a59
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        echo "SonarQube Quality Gate Status: ${qg.status}"
                        
                        if (qg.status != 'OK') {
                            error "Pipeline failed due to Quality Gate failure."
                        }
                    }
                }
            }
        }
        stage('Check Code Coverage') {
            steps {
                script {
                    def coverage = sh(script: "curl -s -u $SONAR_TOKEN: http://192.168.2.101:9000/api/measures/component?component=code-check&metricKeys=coverage | jq -r '.component.measures[0].value'", returnStdout: true).trim()
                    
                    echo "Code Coverage: ${coverage}%"
                    
                    if (coverage.toInteger() < 60) {
                        error "Pipeline failed due to low code coverage (${coverage}%)"
                    }
                }
            }
        }
    


        stage("Run Docker Compose") {
            steps {
                sh '''
                docker build -t "${IMAGE_NAME}" .
                '''
            }
        }

       


        stage("Docker Tags & Push (Python App)") {
            steps {
                sh '''
                docker tag ${IMAGE_NAME} xyz673/${IMAGE_NAME}:${BUILD_NUMBER}
                docker push xyz673/${IMAGE_NAME}:${BUILD_NUMBER}

                '''
            }
        }

    }
}

